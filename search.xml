<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx源码学习:惊群的处理]]></title>
    <url>%2F2019%2F07%2F21%2FNginx%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%3A%E6%83%8A%E7%BE%A4%E7%9A%84%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[Nginx 是一个多进程的模型, 后台进程包括一个 master 进程和多个 worker 进程.master 进程负责和用户进行交互以及对 worker 进程的管理;worker 进程进行各类事件的处理 Nginx 处理惊群上面介绍过, nginx 中所有的 worker 进程都继承了 master 进程的监听 socketfd, 调用 epoll_wait 进程等待, 这样的话如果没有任何处理, 那么一个新连接到来时, 会有多个 worker 进程会唤醒, 但是只有一个 worker 进程会 accept 成功, 其余皆失败, 那么这样就导致了性能的浪费 accept已经不会再导致惊群的出现linux 2.6 版本之前, 监听同一个 socketfd 的进程会挂在同一个等待队列上, 当请求到来时, 唤醒所有等待的进程,2.6 版本之后, 引入了一个标记位WQ_FLAG_EXCLUSIVE, 设置等待队列的flag为EXCLUSIVE, 表示一次只有一个进程会被唤醒, 当有新连接进来时, 在唤醒等待队列的函数里(__wake_up_common()), 会将传进来的参数(nr_exclusive, 值1)和WQ_FLAG_EXCLUSIVE做 &amp;运算, 结果为真, 跳出循环 nginx的处理方式 使用锁 使用 epoll 的EPOLLEXCLUSIVE选项 使用SO_REUSEPORT选项 使用锁的方式nginx 中自己实现了锁机制, 123456789101112131415typedef struct &#123;#if (NGX_HAVE_ATOMIC_OPS) //这个宏判断是否支持原子操作 ngx_atomic_t *lock;#if (NGX_HAVE_POSIX_SEM) //是否支持信号量 ngx_atomic_t *wait; ngx_uint_t semaphore; sem_t sem;#endif#else //不支持原子变量, 使用文件锁, 效率较低 ngx_fd_t fd; u_char *name;#endif ngx_uint_t spin; //获取锁时尝试的自旋次数,使用原子操作实现时才有意义&#125; ngx_shmtx_t; 不支持原子变量时, 会使用文件锁来实现互斥锁支持原子变量时会使用变量会使用原子变量操作来实现一个自旋锁, 其中spin表示自旋次数,而最新的 nginx 代码增加了这个支持信号量的判断是在支持信号量的情况下, 如果自旋次数达到了上限而进程还未获取到锁, 则进程会在信号量上阻塞, 进入睡眠状态; 不支持信号量情况下, 直接让出 CPU 在ngx_event.c/ngx_event_process_init()中, 初始化 ngx_use_accept_mutex 123456789101112//如果使用了master worker的多进程模式.且worker进程数量&gt;1,且配置文件里设置了使用accept_mutex if (ccf-&gt;master &amp;&amp; ccf-&gt;worker_processes &gt; 1 &amp;&amp; ecf-&gt;accept_mutex) &#123; ngx_use_accept_mutex = 1; //初始化该变量表示nginx使用accept互斥 ngx_accept_mutex_held = 0; //表示当前是否已经持有锁 ngx_accept_mutex_delay = ecf-&gt;accept_mutex_delay; //表示当获得锁失败后再次请求锁的价格时间 &#125; else &#123; ngx_use_accept_mutex = 0; &#125; 配置文件中的 events区域下可以设置accept_mutex选项, 不设置默认为关闭 123events &#123; accept_mutex on;&#125; 在ngx_event_accept.c会初始化在ngx_event.c声明的变量ngx_accept_disabled, 这个变量是一个阈值 如果大于 0, 表示当前进程处于高负载,放弃接收新连接, 继续处理本进程事件, 并且ngx_accept_disabled减一, 表示让出了一次 accept 的机会, 负载减轻, 直到该值小于0, 重新进入低负载状态小于 0, 表示处于低负载, 可以继续申请 accept 锁, 接收新连接 相当于实现了一个负载均衡 1ngx_accept_disabled = ngx_cycle-&gt;connection_n / 8 - ngx_cycle-&gt;free_connection_n; //当前连接数 在ngx_event.c/ngx_process_events_and_timers()中判断是否使用锁 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889//每个worker进程在该函数中处理事件voidngx_process_events_and_timers(ngx_cycle_t *cycle)&#123; ngx_uint_t flags; ngx_msec_t timer, delta; if (ngx_timer_resolution) &#123; timer = NGX_TIMER_INFINITE; flags = 0; &#125; else &#123; timer = ngx_event_find_timer(); flags = NGX_UPDATE_TIME;#if (NGX_WIN32) /* handle signals from master in case of network inactivity */ if (timer == NGX_TIMER_INFINITE || timer &gt; 500) &#123; timer = 500; &#125;#endif &#125; //ngx_use_accept_mutex标志位表示是否需要对accept枷锁来解决惊群问题 //当worker进程数&gt;1且配置文件中 if (ngx_use_accept_mutex) &#123; if (ngx_accept_disabled &gt; 0) //当前处于高负载,放弃竞争accept锁, &#123; ngx_accept_disabled--; //负载减轻 &#125; else &#123; //尝试获取锁,出错返回,成功会将监听套接字加入到当前的epoll事件驱动模块中 if (ngx_trylock_accept_mutex(cycle) == NGX_ERROR) &#123; return; &#125; //为1表示已经获得锁 if (ngx_accept_mutex_held) &#123; //该标记表示如果有新连接或者数据到来时,先保存该事件,等释放锁之后,在进行accept或者读取, //因为我们应该保证持有锁的时间尽可能短 flags |= NGX_POST_EVENTS; &#125; else &#123; //没有获得锁就设置timer定时器,在epoll中休眠(中途可以被唤醒,比如有新连接到达),然后继续tryLock if (timer == NGX_TIMER_INFINITE || timer &gt; ngx_accept_mutex_delay) &#123; timer = ngx_accept_mutex_delay; &#125; &#125; &#125; &#125; //计算ngx_process_events函数执行花费的时间 delta = ngx_current_msec; //在linux下使用epoll时,该函数对应的是ngx_epoll_process_events函数 (void) ngx_process_events(cycle, timer, flags); //计算用时 delta = ngx_current_msec - delta; //记录log ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;timer delta: %M&quot;, delta); //执行对应的新建立的连接的延迟队列中的事件 ngx_event_process_posted(cycle, &amp;ngx_posted_accept_events); //如果持有锁,释放 if (ngx_accept_mutex_held) &#123; ngx_shmtx_unlock(&amp;ngx_accept_mutex); &#125; //ngx_process_enevts耗时&gt;0时,执行所有的超时事件 if (delta) &#123; ngx_event_expire_timers(); &#125; //执行普通事件延迟队列中的事件 ngx_event_process_posted(cycle, &amp;ngx_posted_events);&#125; 然后就是ngx_event_accept.c/ngx_trylock_accept_mutex() 123456789101112131415161718192021222324252627282930313233343536373839404142434445//尝试获取锁ngx_int_tngx_trylock_accept_mutex(ngx_cycle_t *cycle)&#123; //尝试获取ngx_accept_mutex,非阻塞的 if (ngx_shmtx_trylock(&amp;ngx_accept_mute &#123; ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;accept mutex locked&quot;); //如果本来就拥有锁直接返回OK //ngx_accept_events宏是用于eventport的,eventport也是一个事件驱动库,他会每次调用完事件后自动清除, //会将ngx_accept_events置1需要重新添加 //应该是不用管的 if (ngx_accept_mutex_held &amp;&amp; ngx_accept_events == 0) &#123; return NGX_OK; &#125; //将监听连接上的所有读事件添加到当前epoll事件合集 if (ngx_enable_accept_events(cycle) == NGX_ERROR) &#123; ngx_shmtx_unlock(&amp;ngx_accept_mutex); return NGX_ERROR; &#125; ngx_accept_events = 0; ngx_accept_mutex_held = 1; return NGX_OK; &#125; ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle-&gt;log, 0, &quot;accept mutex lock failed: %ui&quot;, ngx_accept_mutex_held); //如果前面获取失败了,这还是1就要处理为0 if (ngx_accept_mutex_held) &#123; if (ngx_disable_accept_events(cycle, 0) == NGX_ERROR) &#123; return NGX_ERROR; &#125; ngx_accept_mutex_held = 0; &#125; return NGX_OK;&#125; nginx 采用锁的方式避免惊群的逻辑很简单, 就是只能有一个进程可以获得接收新连接的机会 采用EPOLLEXCLUSIVE这个选项作为epoll_ctl的第二个参数, 是专门用来解决多个 epoll 句柄监听了同一个套接字导致的惊群问题 This new flag allows for exclusive wakeups when there are multiple epfds attached to a shared fd event source.The implementation walks the list of exclusive waiters, and queues an event to each epfd, until it finds the first waiter that has threads blocked on it via epoll_wait(). The idea is to search for threads which are idle and ready to process the wakeup events. Thus, we queue an event to at least 1 epfd, but may still potentially queue an event to all epfds that are attached to the shared fd source. 当多个 epfd 添加了共享的fd事件源时，这个新标志允许独占唤醒。该实现遍历独占等待列表，并将事件排队到每个epfd，直到找到第一个通过epoll_wait()在其上阻塞线程的等待者。其思想是搜索空闲的线程，并准备处理唤醒事件。因此，我们至少将一个事件排队到一个epfd，但是仍然可能将一个事件排队到所有附加到共享fd源的epfd。 该选项只支持和EPOLL_CTL_ADD使用 使用SO_REUSEPORT这个就是交给内核去做负载均衡了 Nginx 惊群效率的考虑Nginx 的进程数时固定的, 所以他发生惊群时, 导致的后果并没有那么严重, 反而当连接数非常大时, 关闭 accept_mutex, 效率还会提升因为有巨大的连接量时, 如果还是每个进程互斥的去接收新连接, 效率可想而知, 但是所有的进程全部激活各自去抢, 反而效率会高一些]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[诗词]]></title>
    <url>%2F2019%2F07%2F15%2F%E8%AF%97%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[记录我喜欢的诗词 愿我如星君如月, 夜夜流光相皎洁. 车遥遥篇-范成大古代最美十句情诗之一 长相思兮长相忆，短相思兮无穷极。 早知如此绊人心，何如当初莫相识？ 秋风词-李白 抽刀断水水更流, 举杯消愁愁更愁. 弃我去者，昨日之日不可留； 乱我心者，今日之日多烦忧。 宣州谢朓楼饯别校书叔云-李白 今人不见古时月, 今月曾经照古人 把酒问月-李白 生者为过客，死者为归人。天地一逆旅，同悲万古尘。 拟古十二首-李白 安得倚天剑,跨海斩长鲸。 临江王节士歌-李白 应是天仙狂醉,乱把浮云揉碎。 清平乐·画堂晨起-李白]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++代理类]]></title>
    <url>%2F2019%2F07%2F14%2FC%2B%2B%E4%BB%A3%E7%90%86%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[前言本次读书笔记为C++沉思录第五章, 介绍的是代理类, 代理类是句柄类的一种, 较为简单 代理类并不局限于C++语言, 是一种广泛的编程思想 面临的问题C++通过虚函数来实现的运行时多态, 但是我们在构建一个容器存储时(不管是内建类型还是自定义类型容器)只能获得编译时类型一致的元素值. 例如:std::vector&lt;T&gt;, 我们声明一个存储 T 类型的 vector, 但是有时实际中我们拥有很多继承于同一基类的派生类对象, 若是容器中只能包含相同类型的元素, 我们就无法在该容器中包含同一个基类不同派生类对象了 而我们能想到的一个经典办法就是: 存储指针; 不过存储指针必然伴随着内存管理的问题, 即如何得知指针指向的对象是否还存在 那么我们现在面临的问题就是: 当我们将继承和容器共用时, 要管理内存分配和把不同类型对象放入同一容器 解决办法所谓计算机领域的任何问题, 都能通过增加一个中间层来解决 代理类代理类(surrogate)就是做这样的工作: 让我们忽略正在处理的对象的准确类型. 代理类是句柄(handle)类中最简单的一种 现有如下例子: 123456789101112class Vehicle //基类&#123;public: virtual double weight() const = 0; virtual void start() = 0; // ...&#125;;//派生类class RoadVehicle : public Vehicle&#123; / * ... */ &#125;;class AutoVehicle : public RoadVehicle&#123; /* ... */&#125;;class Aircraft : public Vehicle &#123; / * ... */&#125;;class Helicopter : public Aircraft &#123; / * ... */&#125;; 首先, 我们给基类和所有派生类增加copy接口, 返回对应的确切类型 123456789101112131415161718192021222324252627class Vehicle&#123; public: virtual Vehicle * copy() const = 0; /**/&#125;; //Vehicle的派生类都自实现copy函数class Truck : public Vehicle&#123;public: Vehicle* copy() const &#123; return new Truck(*this); &#125; /**/&#125;; //同时也该增加一个虚析构函数：class Vehicle&#123; public： virtual double weight() const = 0; virtual void start() = 0; virtual Vehicle * copy() const = 0; virtual ~Vehicle() &#123;&#125; // ...&#125;; 代理类: 1234567891011121314151617181920212223242526272829303132333435363738class VehicleSurrogate&#123;public: VehicleSurrogate() //缺省构造函数空代理 : vp(NULL) &#123;&#125;; VehicleSurrogate(const Vehicle&amp; v) //针对所有继承自Vehicle的派生类 : vp(v.copy()) &#123;&#125;; ~VehicleSurrogate() &#123;&#125;; VehicleSurrogate(const VehicleSurrogate&amp; v) : vp(v.vp ? v.vp-&gt;copy() : NULL) &#123;&#125;; //v.vp非零检测 VehicleSurrogate&amp; operator=(const VehicleSurrogate&amp; v) &#123; if (this != &amp;v) // 确保没有将代理赋值给它自身 &#123; delete vp; vp = (v.vp ? v.vp-&gt;copy() : NULL); &#125; return *this; &#125;; //来自类Vehicle的操作 void start() &#123; if (vp == 0) throw &quot;empty VehicleSurrogate.start()&quot;; vp-&gt;start(); &#125;; double weight() const &#123; if(vp == 0) throw &quot;empty VehcileSurrogate.weight()&quot;; return vp-&gt;weight(); &#125; private: Vehicle* vp;&#125;; 总结代理类很好理解, 就是一种管理句柄的句柄类, 提供了一个中间层, 让所有子类自定义了一个 copy 函数, 返回自身的复制, 代理类中有一个基类指针保存子类 返回自身的复制? 这听起来在某些时候行不通, 可能是因为复制代价太大或者根本就无法复制, 解决办法就是本书下一章节介绍的句柄类(也就是shared_ptr, 智能指针不仅仅是 shared_ptr, 其他的智能指针和句柄类并不相同) 该章介绍的代理类很好理解, 需要掌握的是这种编程思想]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>C++沉思录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello My New World]]></title>
    <url>%2F2019%2F07%2F08%2FHello%20My%20World%2F</url>
    <content type="text"><![CDATA[路漫漫其修远兮]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
